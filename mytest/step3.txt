

module {
  func @miopen_conv2d_kcyx_nchw_nkhw(%arg0: memref<1024x1024x1x1xbf16>, %arg1: memref<128x1024x14x14xbf16>, %arg2: memref<128x1024x14x14xbf16>) {
    %c256 = constant 256 : index
    %c128 = constant 128 : index
    %c2 = constant 2 : index
    %cst = constant dense<0.000000e+00> : vector<32xf32>
    %c63 = constant 63 : index
    %c4 = constant 4 : index
    %c4_i32 = constant 4 : i32
    %c8_i32 = constant 8 : i32
    %c32 = constant 32 : index
    %c16_i32 = constant 16 : i32
    %c0_i32 = constant 0 : i32
    %c0 = constant 0 : index
    %c1 = constant 1 : index
    %c64 = constant 64 : index
    %0 = miopen.workgroup_id : index
    %1 = miopen.workitem_id : index
    %2 = remi_signed %0, %c4 : index
    %3 = divi_signed %0, %c4 : index
    %4 = muli %2, %c256 : index
    %5 = muli %3, %c128 : index
    %6 = index_cast %4 : index to i32
    %7 = index_cast %5 : index to i32
    %8 = remi_signed %1, %c4 : index
    %9 = divi_signed %1, %c4 : index
    %10 = muli %8, %c4 : index
    %11 = muli %9, %c4 : index
    %12 = index_cast %10 : index to i32
    %13 = index_cast %11 : index to i32
    %14 = addi %6, %13 : i32
    %15 = divi_signed %1, %c32 : index
    %16 = remi_signed %1, %c32 : index
    %17 = muli %15, %c2 : index
    %18 = muli %16, %c4 : index
    %19 = index_cast %17 : index to i32
    %20 = index_cast %18 : index to i32
    %21 = addi %7, %20 : i32
    %22 = miopen.alloc() : memref<6144xbf16, 3>
    %23 = miopen.alloc() : memref<4x4xbf16, 5>
    %24 = miopen.alloc() : memref<2x4xbf16, 5>
    %25 = miopen.alloc() : memref<2xi32, 5>
    store %12, %25[%c0] : memref<2xi32, 5>
    store %14, %25[%c1] : memref<2xi32, 5>
    %26 = miopen.alloc() : memref<2xi32, 5>
    store %12, %26[%c0] : memref<2xi32, 5>
    store %13, %26[%c1] : memref<2xi32, 5>
    %27 = miopen.alloc() : memref<2xi32, 5>
    store %19, %27[%c0] : memref<2xi32, 5>
    store %21, %27[%c1] : memref<2xi32, 5>
    %28 = miopen.alloc() : memref<2xi32, 5>
    store %19, %28[%c0] : memref<2xi32, 5>
    store %20, %28[%c1] : memref<2xi32, 5>
    %29 = load %25[%c0] : memref<2xi32, 5>
    %30 = load %25[%c1] : memref<2xi32, 5>
    miopen.threadwise_copy(%arg0, %23, %29, %30, %c0_i32, %c0_i32) {coord_transforms = [{domain = [1024 : i32, 1024 : i32], operand = 0 : i32, transforms = [affine_map<(d0, d1) -> (d1, d0, 0, 0)>]}], dest_data_per_write = 1 : i32, dim_access_order = [1 : i32, 0 : i32], source_data_per_read = 1 : i32, vector_read_write_dim = 0 : i32} : memref<1024x1024x1x1xbf16>, memref<4x4xbf16, 5>
    %31 = load %26[%c0] : memref<2xi32, 5>
    %32 = load %26[%c1] : memref<2xi32, 5>
    miopen.threadwise_copy(%23, %22, %c0_i32, %c0_i32, %31, %32) {coord_transforms = [{operand = 1 : i32, transforms = [affine_map<(d0, d1) -> (d1 + d0 * 256)>]}], dest_data_per_write = 1 : i32, dim_access_order = [0 : i32, 1 : i32], source_data_per_read = 1 : i32, vector_read_write_dim = 0 : i32} : memref<4x4xbf16, 5>, memref<6144xbf16, 3>
    %33 = load %27[%c0] : memref<2xi32, 5>
    %34 = load %27[%c1] : memref<2xi32, 5>
    miopen.threadwise_copy(%arg1, %24, %33, %34, %c0_i32, %c0_i32) {coord_transforms = [{domain = [1024 : i32, 25088 : i32], operand = 0 : i32, transforms = [affine_map<(d0, d1) -> (d1 floordiv 196, d0, (d1 mod 196) floordiv 14, (d1 mod 196) mod 14)>, affine_map<(d0, d1, d2, d3, d4, d5) -> (d0, d1, d2 + d3, d4 + d5)>]}], dest_data_per_write = 1 : i32, dim_access_order = [0 : i32, 1 : i32], source_data_per_read = 1 : i32, vector_read_write_dim = 1 : i32} : memref<128x1024x14x14xbf16>, memref<2x4xbf16, 5>
    %35 = load %28[%c0] : memref<2xi32, 5>
    %36 = load %28[%c1] : memref<2xi32, 5>
    miopen.threadwise_copy(%24, %22, %c0_i32, %c0_i32, %35, %36) {coord_transforms = [{operand = 1 : i32, transforms = [affine_map<(d0, d1) -> (d1 + d0 * 128 + 4096)>]}], dest_data_per_write = 1 : i32, dim_access_order = [0 : i32, 1 : i32], source_data_per_read = 1 : i32, vector_read_write_dim = 1 : i32} : memref<2x4xbf16, 5>, memref<6144xbf16, 3>
    %37 = divi_signed %1, %c64 : index
    %38 = divi_signed %37, %c2 : index
    %39 = remi_signed %37, %c2 : index
    %40 = muli %38, %c128 : index
    %41 = muli %39, %c64 : index
    %42 = miopen.alloc() : memref<32xbf16, 5>
    %43 = miopen.alloc() : memref<16xbf16, 5>
    %44:4 = scf.for %arg3 = %c0 to %c63 step %c1 iter_args(%arg4 = %cst, %arg5 = %cst, %arg6 = %cst, %arg7 = %cst) -> (vector<32xf32>, vector<32xf32>, vector<32xf32>, vector<32xf32>) {
      %204 = load %25[%c0] : memref<2xi32, 5>
      %205 = addi %204, %c16_i32 : i32
      store %205, %25[%c0] : memref<2xi32, 5>
      %206 = load %25[%c1] : memref<2xi32, 5>
      store %206, %25[%c1] : memref<2xi32, 5>
      %207 = load %25[%c0] : memref<2xi32, 5>
      %208 = load %25[%c1] : memref<2xi32, 5>
      miopen.threadwise_copy(%arg0, %23, %207, %208, %c0_i32, %c0_i32) {coord_transforms = [{domain = [1024 : i32, 1024 : i32], operand = 0 : i32, transforms = [affine_map<(d0, d1) -> (d1, d0, 0, 0)>]}], dest_data_per_write = 1 : i32, dim_access_order = [1 : i32, 0 : i32], source_data_per_read = 1 : i32, vector_read_write_dim = 0 : i32} : memref<1024x1024x1x1xbf16>, memref<4x4xbf16, 5>
      %209 = load %27[%c0] : memref<2xi32, 5>
      %210 = addi %209, %c16_i32 : i32
      store %210, %27[%c0] : memref<2xi32, 5>
      %211 = load %27[%c1] : memref<2xi32, 5>
      store %211, %27[%c1] : memref<2xi32, 5>
      %212 = load %27[%c0] : memref<2xi32, 5>
      %213 = load %27[%c1] : memref<2xi32, 5>
      miopen.threadwise_copy(%arg1, %24, %212, %213, %c0_i32, %c0_i32) {coord_transforms = [{domain = [1024 : i32, 25088 : i32], operand = 0 : i32, transforms = [affine_map<(d0, d1) -> (d1 floordiv 196, d0, (d1 mod 196) floordiv 14, (d1 mod 196) mod 14)>, affine_map<(d0, d1, d2, d3, d4, d5) -> (d0, d1, d2 + d3, d4 + d5)>]}], dest_data_per_write = 1 : i32, dim_access_order = [0 : i32, 1 : i32], source_data_per_read = 1 : i32, vector_read_write_dim = 1 : i32} : memref<128x1024x14x14xbf16>, memref<2x4xbf16, 5>
      miopen.workgroup_barrier
      %214:2 = miopen.xdlops_gemm_v2(%22, %22, %40, %41, %42, %43, %arg4, %arg5) {coord_transforms = [{operand = 1 : i32, transforms = [affine_map<(d0) -> (d0 + 4096)>]}, {operand = 0 : i32, transforms = []}], k = 16 : i32, m = 256 : i32, m_per_wave = 64 : i32, n = 128 : i32, n_per_wave = 64 : i32} : memref<6144xbf16, 3>, memref<6144xbf16, 3>, index, index, memref<32xbf16, 5>, memref<16xbf16, 5>, vector<32xf32>, vector<32xf32>
      %215 = addi %40, %c64 : index
      %216:2 = miopen.xdlops_gemm_v2(%22, %22, %215, %41, %42, %43, %arg6, %arg7) {coord_transforms = [{operand = 1 : i32, transforms = [affine_map<(d0) -> (d0 + 4096)>]}, {operand = 0 : i32, transforms = []}], k = 16 : i32, m = 256 : i32, m_per_wave = 64 : i32, n = 128 : i32, n_per_wave = 64 : i32} : memref<6144xbf16, 3>, memref<6144xbf16, 3>, index, index, memref<32xbf16, 5>, memref<16xbf16, 5>, vector<32xf32>, vector<32xf32>
      miopen.workgroup_barrier
      %217 = load %26[%c0] : memref<2xi32, 5>
      %218 = load %26[%c1] : memref<2xi32, 5>
      miopen.threadwise_copy(%23, %22, %c0_i32, %c0_i32, %217, %218) {coord_transforms = [{operand = 1 : i32, transforms = [affine_map<(d0, d1) -> (d1 + d0 * 256)>]}], dest_data_per_write = 1 : i32, dim_access_order = [0 : i32, 1 : i32], source_data_per_read = 1 : i32, vector_read_write_dim = 0 : i32} : memref<4x4xbf16, 5>, memref<6144xbf16, 3>
      %219 = load %28[%c0] : memref<2xi32, 5>
      %220 = load %28[%c1] : memref<2xi32, 5>
      miopen.threadwise_copy(%24, %22, %c0_i32, %c0_i32, %219, %220) {coord_transforms = [{operand = 1 : i32, transforms = [affine_map<(d0, d1) -> (d1 + d0 * 128 + 4096)>]}], dest_data_per_write = 1 : i32, dim_access_order = [0 : i32, 1 : i32], source_data_per_read = 1 : i32, vector_read_write_dim = 1 : i32} : memref<2x4xbf16, 5>, memref<6144xbf16, 3>
      scf.yield %214#0, %214#1, %216#0, %216#1 : vector<32xf32>, vector<32xf32>, vector<32xf32>, vector<32xf32>
    }
    miopen.workgroup_barrier
    %45:2 = miopen.xdlops_gemm_v2(%22, %22, %40, %41, %42, %43, %44#0, %44#1) {coord_transforms = [{operand = 1 : i32, transforms = [affine_map<(d0) -> (d0 + 4096)>]}, {operand = 0 : i32, transforms = []}], k = 16 : i32, m = 256 : i32, m_per_wave = 64 : i32, n = 128 : i32, n_per_wave = 64 : i32} : memref<6144xbf16, 3>, memref<6144xbf16, 3>, index, index, memref<32xbf16, 5>, memref<16xbf16, 5>, vector<32xf32>, vector<32xf32>
    %46 = addi %40, %c64 : index
    %47:2 = miopen.xdlops_gemm_v2(%22, %22, %46, %41, %42, %43, %44#2, %44#3) {coord_transforms = [{operand = 1 : i32, transforms = [affine_map<(d0) -> (d0 + 4096)>]}, {operand = 0 : i32, transforms = []}], k = 16 : i32, m = 256 : i32, m_per_wave = 64 : i32, n = 128 : i32, n_per_wave = 64 : i32} : memref<6144xbf16, 3>, memref<6144xbf16, 3>, index, index, memref<32xbf16, 5>, memref<16xbf16, 5>, vector<32xf32>, vector<32xf32>
    %48 = remi_signed %1, %c64 : index
    %49 = divi_signed %48, %c32 : index
    %50 = remi_signed %48, %c32 : index
    %51 = muli %49, %c4 : index
    %52 = remi_signed %37, %c2 : index
    %53 = muli %52, %c64 : index
    %54 = addi %53, %50 : index
    %55 = index_cast %54 : index to i32
    %56 = divi_signed %37, %c2 : index
    %57 = muli %56, %c128 : index
    %58 = addi %57, %51 : index
    %59 = index_cast %58 : index to i32
    %60 = addi %6, %59 : i32
    %61 = addi %7, %55 : i32
    %62 = divi_signed %60, %c8_i32 : i32
    %63 = remi_signed %60, %c8_i32 : i32
    %64 = divi_signed %63, %c4_i32 : i32
    %65 = remi_signed %60, %c4_i32 : i32
    miopen.threadwise_copy_v2(%45#0, %arg2, %c0_i32, %c0_i32, %c0_i32, %c0_i32, %c0_i32, %62, %64, %65, %61) {bound = [4 : i32, 1 : i32, 4 : i32, 1 : i32], coord_transforms = [{operand = 0 : i32, transforms = [affine_map<(d0, d1, d2, d3) -> (d0 * 4 + d2)>]}, {domain = [128 : i32, 2 : i32, 4 : i32, 25088 : i32], operand = 1 : i32, transforms = [affine_map<(d0, d1, d2, d3) -> (d3 floordiv 196, d0 * 8 + d1 * 4 + d2, (d3 mod 196) floordiv 14, (d3 mod 196) mod 14)>, affine_map<(d0, d1) -> (d1 floordiv 196, d0, (d1 mod 196) floordiv 14, (d1 mod 196) mod 14)>]}], dest_data_per_write = 1 : i32, dim_access_order = [0 : i32, 1 : i32, 2 : i32, 3 : i32], source_data_per_read = 1 : i32, vector_read_write_dim = 3 : i32} : vector<32xf32>, memref<128x1024x14x14xbf16>
    %66 = remi_signed %1, %c64 : index
    %67 = divi_signed %66, %c32 : index
    %68 = remi_signed %66, %c32 : index
    %69 = addi %68, %c32 : index
    %70 = muli %67, %c4 : index
    %71 = remi_signed %37, %c2 : index
    %72 = muli %71, %c64 : index
    %73 = addi %72, %69 : index
    %74 = index_cast %73 : index to i32
    %75 = divi_signed %37, %c2 : index
    %76 = muli %75, %c128 : index
    %77 = addi %76, %70 : index
    %78 = index_cast %77 : index to i32
    %79 = addi %6, %78 : i32
    %80 = addi %7, %74 : i32
    %81 = divi_signed %79, %c8_i32 : i32
    %82 = remi_signed %79, %c8_i32 : i32
    %83 = divi_signed %82, %c4_i32 : i32
    %84 = remi_signed %79, %c4_i32 : i32
    miopen.threadwise_copy_v2(%45#0, %arg2, %c16_i32, %c0_i32, %c0_i32, %c0_i32, %c0_i32, %81, %83, %84, %80) {bound = [4 : i32, 1 : i32, 4 : i32, 1 : i32], coord_transforms = [{operand = 0 : i32, transforms = [affine_map<(d0, d1, d2, d3) -> (d0 * 4 + d2)>]}, {domain = [128 : i32, 2 : i32, 4 : i32, 25088 : i32], operand = 1 : i32, transforms = [affine_map<(d0, d1, d2, d3) -> (d3 floordiv 196, d0 * 8 + d1 * 4 + d2, (d3 mod 196) floordiv 14, (d3 mod 196) mod 14)>, affine_map<(d0, d1) -> (d1 floordiv 196, d0, (d1 mod 196) floordiv 14, (d1 mod 196) mod 14)>]}], dest_data_per_write = 1 : i32, dim_access_order = [0 : i32, 1 : i32, 2 : i32, 3 : i32], source_data_per_read = 1 : i32, vector_read_write_dim = 3 : i32} : vector<32xf32>, memref<128x1024x14x14xbf16>
    %85 = remi_signed %1, %c64 : index
    %86 = divi_signed %85, %c32 : index
    %87 = remi_signed %85, %c32 : index
    %88 = muli %86, %c4 : index
    %89 = addi %88, %c32 : index
    %90 = remi_signed %37, %c2 : index
    %91 = muli %90, %c64 : index
    %92 = addi %91, %87 : index
    %93 = index_cast %92 : index to i32
    %94 = divi_signed %37, %c2 : index
    %95 = muli %94, %c128 : index
    %96 = addi %95, %89 : index
    %97 = index_cast %96 : index to i32
    %98 = addi %6, %97 : i32
    %99 = addi %7, %93 : i32
    %100 = divi_signed %98, %c8_i32 : i32
    %101 = remi_signed %98, %c8_i32 : i32
    %102 = divi_signed %101, %c4_i32 : i32
    %103 = remi_signed %98, %c4_i32 : i32
    miopen.threadwise_copy_v2(%45#1, %arg2, %c0_i32, %c0_i32, %c0_i32, %c0_i32, %c0_i32, %100, %102, %103, %99) {bound = [4 : i32, 1 : i32, 4 : i32, 1 : i32], coord_transforms = [{operand = 0 : i32, transforms = [affine_map<(d0, d1, d2, d3) -> (d0 * 4 + d2)>]}, {domain = [128 : i32, 2 : i32, 4 : i32, 25088 : i32], operand = 1 : i32, transforms = [affine_map<(d0, d1, d2, d3) -> (d3 floordiv 196, d0 * 8 + d1 * 4 + d2, (d3 mod 196) floordiv 14, (d3 mod 196) mod 14)>, affine_map<(d0, d1) -> (d1 floordiv 196, d0, (d1 mod 196) floordiv 14, (d1 mod 196) mod 14)>]}], dest_data_per_write = 1 : i32, dim_access_order = [0 : i32, 1 : i32, 2 : i32, 3 : i32], source_data_per_read = 1 : i32, vector_read_write_dim = 3 : i32} : vector<32xf32>, memref<128x1024x14x14xbf16>
    %104 = remi_signed %1, %c64 : index
    %105 = divi_signed %104, %c32 : index
    %106 = remi_signed %104, %c32 : index
    %107 = addi %106, %c32 : index
    %108 = muli %105, %c4 : index
    %109 = addi %108, %c32 : index
    %110 = remi_signed %37, %c2 : index
    %111 = muli %110, %c64 : index
    %112 = addi %111, %107 : index
    %113 = index_cast %112 : index to i32
    %114 = divi_signed %37, %c2 : index
    %115 = muli %114, %c128 : index
    %116 = addi %115, %109 : index
    %117 = index_cast %116 : index to i32
    %118 = addi %6, %117 : i32
    %119 = addi %7, %113 : i32
    %120 = divi_signed %118, %c8_i32 : i32
    %121 = remi_signed %118, %c8_i32 : i32
    %122 = divi_signed %121, %c4_i32 : i32
    %123 = remi_signed %118, %c4_i32 : i32
    miopen.threadwise_copy_v2(%45#1, %arg2, %c16_i32, %c0_i32, %c0_i32, %c0_i32, %c0_i32, %120, %122, %123, %119) {bound = [4 : i32, 1 : i32, 4 : i32, 1 : i32], coord_transforms = [{operand = 0 : i32, transforms = [affine_map<(d0, d1, d2, d3) -> (d0 * 4 + d2)>]}, {domain = [128 : i32, 2 : i32, 4 : i32, 25088 : i32], operand = 1 : i32, transforms = [affine_map<(d0, d1, d2, d3) -> (d3 floordiv 196, d0 * 8 + d1 * 4 + d2, (d3 mod 196) floordiv 14, (d3 mod 196) mod 14)>, affine_map<(d0, d1) -> (d1 floordiv 196, d0, (d1 mod 196) floordiv 14, (d1 mod 196) mod 14)>]}], dest_data_per_write = 1 : i32, dim_access_order = [0 : i32, 1 : i32, 2 : i32, 3 : i32], source_data_per_read = 1 : i32, vector_read_write_dim = 3 : i32} : vector<32xf32>, memref<128x1024x14x14xbf16>
    %124 = remi_signed %1, %c64 : index
    %125 = divi_signed %124, %c32 : index
    %126 = remi_signed %124, %c32 : index
    %127 = muli %125, %c4 : index
    %128 = addi %127, %c64 : index
    %129 = remi_signed %37, %c2 : index
    %130 = muli %129, %c64 : index
    %131 = addi %130, %126 : index
    %132 = index_cast %131 : index to i32
    %133 = divi_signed %37, %c2 : index
    %134 = muli %133, %c128 : index
    %135 = addi %134, %128 : index
    %136 = index_cast %135 : index to i32
    %137 = addi %6, %136 : i32
    %138 = addi %7, %132 : i32
    %139 = divi_signed %137, %c8_i32 : i32
    %140 = remi_signed %137, %c8_i32 : i32
    %141 = divi_signed %140, %c4_i32 : i32
    %142 = remi_signed %137, %c4_i32 : i32
    miopen.threadwise_copy_v2(%47#0, %arg2, %c0_i32, %c0_i32, %c0_i32, %c0_i32, %c0_i32, %139, %141, %142, %138) {bound = [4 : i32, 1 : i32, 4 : i32, 1 : i32], coord_transforms = [{operand = 0 : i32, transforms = [affine_map<(d0, d1, d2, d3) -> (d0 * 4 + d2)>]}, {domain = [128 : i32, 2 : i32, 4 : i32, 25088 : i32], operand = 1 : i32, transforms = [affine_map<(d0, d1, d2, d3) -> (d3 floordiv 196, d0 * 8 + d1 * 4 + d2, (d3 mod 196) floordiv 14, (d3 mod 196) mod 14)>, affine_map<(d0, d1) -> (d1 floordiv 196, d0, (d1 mod 196) floordiv 14, (d1 mod 196) mod 14)>]}], dest_data_per_write = 1 : i32, dim_access_order = [0 : i32, 1 : i32, 2 : i32, 3 : i32], source_data_per_read = 1 : i32, vector_read_write_dim = 3 : i32} : vector<32xf32>, memref<128x1024x14x14xbf16>
    %143 = remi_signed %1, %c64 : index
    %144 = divi_signed %143, %c32 : index
    %145 = remi_signed %143, %c32 : index
    %146 = addi %145, %c32 : index
    %147 = muli %144, %c4 : index
    %148 = addi %147, %c64 : index
    %149 = remi_signed %37, %c2 : index
    %150 = muli %149, %c64 : index
    %151 = addi %150, %146 : index
    %152 = index_cast %151 : index to i32
    %153 = divi_signed %37, %c2 : index
    %154 = muli %153, %c128 : index
    %155 = addi %154, %148 : index
    %156 = index_cast %155 : index to i32
    %157 = addi %6, %156 : i32
    %158 = addi %7, %152 : i32
    %159 = divi_signed %157, %c8_i32 : i32
    %160 = remi_signed %157, %c8_i32 : i32
    %161 = divi_signed %160, %c4_i32 : i32
    %162 = remi_signed %157, %c4_i32 : i32
    miopen.threadwise_copy_v2(%47#0, %arg2, %c16_i32, %c0_i32, %c0_i32, %c0_i32, %c0_i32, %159, %161, %162, %158) {bound = [4 : i32, 1 : i32, 4 : i32, 1 : i32], coord_transforms = [{operand = 0 : i32, transforms = [affine_map<(d0, d1, d2, d3) -> (d0 * 4 + d2)>]}, {domain = [128 : i32, 2 : i32, 4 : i32, 25088 : i32], operand = 1 : i32, transforms = [affine_map<(d0, d1, d2, d3) -> (d3 floordiv 196, d0 * 8 + d1 * 4 + d2, (d3 mod 196) floordiv 14, (d3 mod 196) mod 14)>, affine_map<(d0, d1) -> (d1 floordiv 196, d0, (d1 mod 196) floordiv 14, (d1 mod 196) mod 14)>]}], dest_data_per_write = 1 : i32, dim_access_order = [0 : i32, 1 : i32, 2 : i32, 3 : i32], source_data_per_read = 1 : i32, vector_read_write_dim = 3 : i32} : vector<32xf32>, memref<128x1024x14x14xbf16>
    %163 = remi_signed %1, %c64 : index
    %164 = divi_signed %163, %c32 : index
    %165 = remi_signed %163, %c32 : index
    %166 = muli %164, %c4 : index
    %167 = addi %166, %c32 : index
    %168 = addi %167, %c64 : index
    %169 = remi_signed %37, %c2 : index
    %170 = muli %169, %c64 : index
    %171 = addi %170, %165 : index
    %172 = index_cast %171 : index to i32
    %173 = divi_signed %37, %c2 : index
    %174 = muli %173, %c128 : index
    %175 = addi %174, %168 : index
    %176 = index_cast %175 : index to i32
    %177 = addi %6, %176 : i32
    %178 = addi %7, %172 : i32
    %179 = divi_signed %177, %c8_i32 : i32
    %180 = remi_signed %177, %c8_i32 : i32
    %181 = divi_signed %180, %c4_i32 : i32
    %182 = remi_signed %177, %c4_i32 : i32
    miopen.threadwise_copy_v2(%47#1, %arg2, %c0_i32, %c0_i32, %c0_i32, %c0_i32, %c0_i32, %179, %181, %182, %178) {bound = [4 : i32, 1 : i32, 4 : i32, 1 : i32], coord_transforms = [{operand = 0 : i32, transforms = [affine_map<(d0, d1, d2, d3) -> (d0 * 4 + d2)>]}, {domain = [128 : i32, 2 : i32, 4 : i32, 25088 : i32], operand = 1 : i32, transforms = [affine_map<(d0, d1, d2, d3) -> (d3 floordiv 196, d0 * 8 + d1 * 4 + d2, (d3 mod 196) floordiv 14, (d3 mod 196) mod 14)>, affine_map<(d0, d1) -> (d1 floordiv 196, d0, (d1 mod 196) floordiv 14, (d1 mod 196) mod 14)>]}], dest_data_per_write = 1 : i32, dim_access_order = [0 : i32, 1 : i32, 2 : i32, 3 : i32], source_data_per_read = 1 : i32, vector_read_write_dim = 3 : i32} : vector<32xf32>, memref<128x1024x14x14xbf16>
    %183 = remi_signed %1, %c64 : index
    %184 = divi_signed %183, %c32 : index
    %185 = remi_signed %183, %c32 : index
    %186 = addi %185, %c32 : index
    %187 = muli %184, %c4 : index
    %188 = addi %187, %c32 : index
    %189 = addi %188, %c64 : index
    %190 = remi_signed %37, %c2 : index
    %191 = muli %190, %c64 : index
    %192 = addi %191, %186 : index
    %193 = index_cast %192 : index to i32
    %194 = divi_signed %37, %c2 : index
    %195 = muli %194, %c128 : index
    %196 = addi %195, %189 : index
    %197 = index_cast %196 : index to i32
    %198 = addi %6, %197 : i32
    %199 = addi %7, %193 : i32
    %200 = divi_signed %198, %c8_i32 : i32
    %201 = remi_signed %198, %c8_i32 : i32
    %202 = divi_signed %201, %c4_i32 : i32
    %203 = remi_signed %198, %c4_i32 : i32
    miopen.threadwise_copy_v2(%47#1, %arg2, %c16_i32, %c0_i32, %c0_i32, %c0_i32, %c0_i32, %200, %202, %203, %199) {bound = [4 : i32, 1 : i32, 4 : i32, 1 : i32], coord_transforms = [{operand = 0 : i32, transforms = [affine_map<(d0, d1, d2, d3) -> (d0 * 4 + d2)>]}, {domain = [128 : i32, 2 : i32, 4 : i32, 25088 : i32], operand = 1 : i32, transforms = [affine_map<(d0, d1, d2, d3) -> (d3 floordiv 196, d0 * 8 + d1 * 4 + d2, (d3 mod 196) floordiv 14, (d3 mod 196) mod 14)>, affine_map<(d0, d1) -> (d1 floordiv 196, d0, (d1 mod 196) floordiv 14, (d1 mod 196) mod 14)>]}], dest_data_per_write = 1 : i32, dim_access_order = [0 : i32, 1 : i32, 2 : i32, 3 : i32], source_data_per_read = 1 : i32, vector_read_write_dim = 3 : i32} : vector<32xf32>, memref<128x1024x14x14xbf16>
    return
  }
  func @main() {
    %0 = alloc() : memref<1024x1024x1x1xbf16>
    %1 = alloc() : memref<128x1024x14x14xbf16>
    %2 = alloc() : memref<128x1024x14x14xbf16>
    %3 = memref_cast %0 : memref<1024x1024x1x1xbf16> to memref<?x?x?x?xbf16>
    %4 = memref_cast %1 : memref<128x1024x14x14xbf16> to memref<?x?x?x?xbf16>
    %5 = memref_cast %2 : memref<128x1024x14x14xbf16> to memref<?x?x?x?xbf16>
    %cst = constant 1.000000e+00 : bf16
    %cst_0 = constant 0.000000e+00 : bf16
    call @mcpuMemset4DBF16(%3, %cst) : (memref<?x?x?x?xbf16>, bf16) -> ()
    call @mcpuMemset4DBF16(%4, %cst) : (memref<?x?x?x?xbf16>, bf16) -> ()
    call @mcpuMemset4DBF16(%5, %cst_0) : (memref<?x?x?x?xbf16>, bf16) -> ()
    %6 = call @mgpuMemAlloc4DBF16(%3) : (memref<?x?x?x?xbf16>) -> memref<?x?x?x?xbf16>
    %7 = call @mgpuMemAlloc4DBF16(%4) : (memref<?x?x?x?xbf16>) -> memref<?x?x?x?xbf16>
    %8 = call @mgpuMemAlloc4DBF16(%5) : (memref<?x?x?x?xbf16>) -> memref<?x?x?x?xbf16>
    %c1_i32 = constant 1 : i32
    %c2_i32 = constant 2 : i32
    call @mgpuMemCopy4DBF16(%3, %6, %c1_i32) : (memref<?x?x?x?xbf16>, memref<?x?x?x?xbf16>, i32) -> ()
    call @mgpuMemCopy4DBF16(%4, %7, %c1_i32) : (memref<?x?x?x?xbf16>, memref<?x?x?x?xbf16>, i32) -> ()
    call @mgpuMemCopy4DBF16(%5, %8, %c1_i32) : (memref<?x?x?x?xbf16>, memref<?x?x?x?xbf16>, i32) -> ()
    %9 = memref_cast %6 : memref<?x?x?x?xbf16> to memref<1024x1024x1x1xbf16>
    %10 = memref_cast %7 : memref<?x?x?x?xbf16> to memref<128x1024x14x14xbf16>
    %11 = memref_cast %8 : memref<?x?x?x?xbf16> to memref<128x1024x14x14xbf16>
    call @conv2d(%9, %10, %11) : (memref<1024x1024x1x1xbf16>, memref<128x1024x14x14xbf16>, memref<128x1024x14x14xbf16>) -> ()
    call @mgpuMemCopy4DBF16(%8, %5, %c2_i32) : (memref<?x?x?x?xbf16>, memref<?x?x?x?xbf16>, i32) -> ()
    call @mgpuMemDealloc4DBF16(%3) : (memref<?x?x?x?xbf16>) -> ()
    call @mgpuMemDealloc4DBF16(%4) : (memref<?x?x?x?xbf16>) -> ()
    call @mgpuMemDealloc4DBF16(%5) : (memref<?x?x?x?xbf16>) -> ()
    dealloc %0 : memref<1024x1024x1x1xbf16>
    dealloc %1 : memref<128x1024x14x14xbf16>
    dealloc %2 : memref<128x1024x14x14xbf16>
    return
  }
  func @mcpuMemset4DBF16(memref<?x?x?x?xbf16>, bf16)
  func @mgpuMemAlloc4DBF16(memref<?x?x?x?xbf16>) -> memref<?x?x?x?xbf16>
  func @mgpuMemCopy4DBF16(memref<?x?x?x?xbf16>, memref<?x?x?x?xbf16>, i32)
  func @conv2d(%arg0: memref<1024x1024x1x1xbf16>, %arg1: memref<128x1024x14x14xbf16>, %arg2: memref<128x1024x14x14xbf16>) {
    return
  }
  func @mgpuMemDealloc4DBF16(memref<?x?x?x?xbf16>)
}